searchData={"items":[{"type":"module","title":"Beethoven","doc":"A Decentralized failover and peer-to-peer node finder for Elixir.\nAllows Elixir nodes to find each other automatically.\nOnce connected, they can coordinate to delegate roles and tasks between the nodes in the cluster.\nWritten using only the Elixir and Erlang standard library.\n\nThis module acts as the unified client for interacting with beethoven as an external client.\nAvoid using the other modules for external PID calls to beethoven services.","ref":"Beethoven.html"},{"type":"function","title":"Beethoven.get_active_nodes/0","doc":"Returns all active cluster nodes by their Node name URI.\nReturns an empty list if this node is in `:standalone`.","ref":"Beethoven.html#get_active_nodes/0"},{"type":"function","title":"Beethoven.get_cluster_nodes/0","doc":"Returns all cluster nodes and their state.","ref":"Beethoven.html#get_cluster_nodes/0"},{"type":"function","title":"Beethoven.get_node_status/0","doc":"Returns state of this node within the Beethoven cluster.\nReturn will only be `:clustered` or `:standalone`.\n\nWrapper for `Beethoven.CoreServer.get_mode/0`.","ref":"Beethoven.html#get_node_status/0"},{"type":"function","title":"Beethoven.get_roles/0","doc":"Returns all roles hosted in Beethoven.","ref":"Beethoven.html#get_roles/0"},{"type":"type","title":"Beethoven.nodeList/0","doc":"List of node names.","ref":"Beethoven.html#t:nodeList/0"},{"type":"type","title":"Beethoven.nodeStatusMap/0","doc":"Status of a Beethoven cluster node.","ref":"Beethoven.html#t:nodeStatusMap/0"},{"type":"type","title":"Beethoven.nodeStatusMapList/0","doc":"List of `nodeStatus()` objects.","ref":"Beethoven.html#t:nodeStatusMapList/0"},{"type":"function","title":"Beethoven.ready?/0","doc":"Gets the current ready state for Beethoven.\n\nWrapper for `Beethoven.Ready.ready?/0`.","ref":"Beethoven.html#ready?/0"},{"type":"type","title":"Beethoven.role/0","doc":"Role data structure.","ref":"Beethoven.html#t:role/0"},{"type":"type","title":"Beethoven.roleList/0","doc":"List of `role()`.","ref":"Beethoven.html#t:roleList/0"},{"type":"function","title":"Beethoven.until_ready/1","doc":"Similar to `ready?()` but will block until the service is ready.\nDefaults to 5_000 milliseconds.\n\nWrapper for `Beethoven.Ready.until_ready/1`.","ref":"Beethoven.html#until_ready/1"},{"type":"module","title":"Beethoven.Allocator","doc":"Allocator is a stack of processes that facilitate the aggregation of telemetry signals\nto determine how busy a given `Beethoven` node is.\n\n# Public API\n\n- `allocate/0` Provides the URI of the least-busy node in the cluster.\n\nThe busyness of nodes is determined via signals.\nRefer to the documentation for `Beethoven.Allocator.Agent` for more information on creating signals.","ref":"Beethoven.Allocator.html"},{"type":"function","title":"Beethoven.Allocator.allocate/0","doc":"Provides the URI of the least-busy node in the cluster.\nUsing this function has no side effects so discarding the output without using it will not cause issues.","ref":"Beethoven.Allocator.html#allocate/0"},{"type":"function","title":"Beethoven.Allocator.child_spec/1","doc":"Returns a specification to start this module under a supervisor.\n\nSee `Supervisor`.","ref":"Beethoven.Allocator.html#child_spec/1"},{"type":"function","title":"Beethoven.Allocator.start_link/1","doc":"Supervisor Entry point.","ref":"Beethoven.Allocator.html#start_link/1"},{"type":"module","title":"Beethoven.Allocator.Agent","doc":"Behaviour to define signals via the `signal()` macro.\n\nThis macro defines a signal that can be sent to the `Beethoven.Allocator` stack.\nOnce defined, this module will have compile-time created functions to streamline the use of the signal.\nEach signal has an atomic name, priority weight, and type defined in it.\nThis data is aggregated and used to generate a busy-score for a node.\n\n# Types\n- `:count` Counts the number of a given thing. Generates 2 functions.\nOne to increment the counter, the other to decrement it. Both modify the counter by `+/-1.0`.\nThe counter will never be lower then `0`.\n\n- `:percent` Represents a float between 0.0 and >100.0. This generates 1 function.\nThis function allows you to set a float payload in the signal.\nThis value must be a positive float.\n\n# Examples\n    defmodule Signals do\n      use Beethoven.Allocator.Agent\n\n      signal(name: :ram, weight: 10.0, type: :percent)\n      signal(name: :http_requests, weight: 5.0, type: :count)\n    end\n\n    # Generates\n    Signals.percent_ram(data) # Data is now the value of the metric in `:ets`\n    Signals.increment_http_requests_count() # +1.0\n    Signals.decrement_http_requests_count() # -1.0\n\nSee `Beethoven.Allocator.Cruncher` for information on how the signals are aggregated.","ref":"Beethoven.Allocator.Agent.html"},{"type":"function","title":"Beethoven.Allocator.Agent.send_signal/1","doc":"**DO NOT USE THIS DIRECTLY.  Please utilize the `signal()` macro within the `Beethoven.Allocator.Agent` module.**\n\nSends a signal message to `Allocator.Ingress`.\n\n# Payload schema\n\n    {header :: {name :: atom(), weight :: integer(), type :: atom()}, payload :: signal_payload()}","ref":"Beethoven.Allocator.Agent.html#send_signal/1"},{"type":"macro","title":"Beethoven.Allocator.Agent.signal/1","doc":"This macro defines a signal that can be sent to the `Beethoven.Allocator` stack.\nOnce defined, this module will have compile-time created functions to streamline the use of the signal.\nEach signal has an atomic name, priority weight, and type defined in it.\nThis data is aggregated and used to generate a busy-score for a node.\n\n# Types\n- `:count` Counts the number of a given thing. Generates 2 functions.\nOne to increment the counter, the other to decrement it. Both modify the counter by `+/-1.0`.\nThe counter will never be lower then `0`.\n\n- `:percent` Represents a float between 0.0 and >100.0. This generates 1 function.\nThis function allows you to set a float payload in the signal.\nThis value must be a positive float.\n\n# Examples\n    defmodule Signals do\n      use Beethoven.Allocator.Agent\n\n      signal(name: :ram, weight: 10.0, type: :percent)\n      signal(name: :http_requests, weight: 5.0, type: :count)\n    end\n\n    # Generates\n    Signals.percent_ram(data) # Data is now the value of the metric in `:ets`\n    Signals.increment_http_requests_count() # +1.0\n    Signals.decrement_http_requests_count() # -1.0\n\nSee `Beethoven.Allocator.Cruncher` for information on how the signals are aggregated.","ref":"Beethoven.Allocator.Agent.html#signal/1"},{"type":"type","title":"Beethoven.Allocator.Agent.signal_definition/0","doc":"Defines a single signal. Commonly used as an input for the `signal()` macro.","ref":"Beethoven.Allocator.Agent.html#t:signal_definition/0"},{"type":"type","title":"Beethoven.Allocator.Agent.signal_message/0","doc":"Message wrapper for sending payload to `Beethoven.Allocator.Ingress`.","ref":"Beethoven.Allocator.Agent.html#t:signal_message/0"},{"type":"type","title":"Beethoven.Allocator.Agent.signal_message_header/0","doc":"Header for the signal metadata; when sending a signal to `Beethoven.Allocator.Ingress`.","ref":"Beethoven.Allocator.Agent.html#t:signal_message_header/0"},{"type":"type","title":"Beethoven.Allocator.Agent.signal_type/0","doc":"Defines types of signal that can be used.","ref":"Beethoven.Allocator.Agent.html#t:signal_type/0"},{"type":"module","title":"Beethoven.Allocator.Cruncher","doc":"Crunches signal data and generates an allocation (or busy-score) score for the current node.\nSignal data is pulled from the `Beethoven.Allocator.Ingress.Cache` ets table.\nThe aggregated score is stored in the `Beethoven.Allocator.Tracker` Mnesia table.\nThis PID will refresh the score anytime `Beethoven.Allocator.Ingress` pushes an update and sends a cast to this PID.","ref":"Beethoven.Allocator.Cruncher.html"},{"type":"function","title":"Beethoven.Allocator.Cruncher.algorithm/1","doc":"Crunching algorithm for each signal item.","ref":"Beethoven.Allocator.Cruncher.html#algorithm/1"},{"type":"function","title":"Beethoven.Allocator.Cruncher.child_spec/1","doc":"Returns a specification to start this module under a supervisor.\n\nSee `Supervisor`.","ref":"Beethoven.Allocator.Cruncher.html#child_spec/1"},{"type":"function","title":"Beethoven.Allocator.Cruncher.send_check/0","doc":"Sends a check message to the local instance of Cruncher","ref":"Beethoven.Allocator.Cruncher.html#send_check/0"},{"type":"function","title":"Beethoven.Allocator.Cruncher.start_link/1","doc":"Supervisor Entry point.","ref":"Beethoven.Allocator.Cruncher.html#start_link/1"},{"type":"module","title":"Beethoven.Allocator.Ingress","doc":"GenServer to handle ingress of signal data.\nData sent to this Server is pushed into `:ets` for use by `Beethoven.Allocator.Cruncher`.","ref":"Beethoven.Allocator.Ingress.html"},{"type":"function","title":"Beethoven.Allocator.Ingress.child_spec/1","doc":"Returns a specification to start this module under a supervisor.\n\nSee `Supervisor`.","ref":"Beethoven.Allocator.Ingress.html#child_spec/1"},{"type":"type","title":"Beethoven.Allocator.Ingress.signal_message/0","doc":"Message wrapper for sending payload to `Beethoven.Allocator.Ingress`.","ref":"Beethoven.Allocator.Ingress.html#t:signal_message/0"},{"type":"type","title":"Beethoven.Allocator.Ingress.signal_message_header/0","doc":"Header for the signal metadata; when sending a signal to `Beethoven.Allocator.Ingress`.","ref":"Beethoven.Allocator.Ingress.html#t:signal_message_header/0"},{"type":"function","title":"Beethoven.Allocator.Ingress.start_link/1","doc":"Supervisor Entry point.","ref":"Beethoven.Allocator.Ingress.html#start_link/1"},{"type":"module","title":"Beethoven.Az","doc":"Azure Platform awareness for the node.\nIf the app is not in Azure, genserver will response `:no_azure` to all calls.\n\n# Functions\n- `get_state/0` Returns the entire state of the GenServer.\n- `get_az_subnet/0` Returns the subnet this VM resides in. Pulls data from cache.\n- `get_az_region/0` Returns the region this VM resides in. Pulls data from cache.","ref":"Beethoven.Az.html"},{"type":"function","title":"Beethoven.Az.child_spec/1","doc":"Returns a specification to start this module under a supervisor.\n\nSee `Supervisor`.","ref":"Beethoven.Az.html#child_spec/1"},{"type":"function","title":"Beethoven.Az.get_az_region/0","doc":"Retrieves the Azure region from IMDS data.","ref":"Beethoven.Az.html#get_az_region/0"},{"type":"function","title":"Beethoven.Az.get_az_subnet/0","doc":"Retrieves the VM's networking config from IMDS data.\n\n**RETURNS ONLY PRIMARY INTERFACE FOR VM**","ref":"Beethoven.Az.html#get_az_subnet/0"},{"type":"function","title":"Beethoven.Az.get_state/0","doc":"Retrieves the Azure region from IMDS data.","ref":"Beethoven.Az.html#get_state/0"},{"type":"function","title":"Beethoven.Az.start_link/1","doc":"Entry point for Supervisors. Links calling PID this this child pid.","ref":"Beethoven.Az.html#start_link/1"},{"type":"module","title":"Beethoven.BeaconServer","doc":"Beacon Server is used to help other Beethoven node find the cluster.\nThis is the TCP Listener the `Beethoven.Locator` server will check for.\n\n---\n\n# External API calls\nThese are calls that can be made from external servers\n- `attempt_recover/0` -> casts a recover message to the Beacon server.\nWill restart the socket if in a failed state. Will do nothing otherwise.\n\n---\n\n# Notes\nThis TCP listener will communicate via the `Beethoven.SeekChat` module.\nThis module provides tools and types for interacting over raw TCP packets between the Beacon server and Locator.","ref":"Beethoven.BeaconServer.html"},{"type":"function","title":"Beethoven.BeaconServer.attempt_recover/0","doc":"Attempts a recovery operation on the Beacon Server.\nIf Server is in a failed state, it will attempt to reboot it.\nIf not, nothing will happen.\n\nIndication of the outcome will be found in the server logs for BeaconServer.","ref":"Beethoven.BeaconServer.html#attempt_recover/0"},{"type":"function","title":"Beethoven.BeaconServer.child_spec/1","doc":"Returns a specification to start this module under a supervisor.\n\nSee `Supervisor`.","ref":"Beethoven.BeaconServer.html#child_spec/1"},{"type":"function","title":"Beethoven.BeaconServer.start_link/1","doc":"Entry point for a supervisor.","ref":"Beethoven.BeaconServer.html#start_link/1"},{"type":"behaviour","title":"Beethoven.CoreServer","doc":"Core Service for Beethoven.\nWatches other nodes within the cluster and cascade updates across the beethoven PIDs as needed.\n\n---\n\n# External API calls\nThese are calls that can be made from external servers\n- `alert_me/1` -> Alerts the caller on cluster node changes. (see 'Listening for cluster node changes' for more info.)\n- `new_node/1` -> Adds node to CoreServer state mnesia table. (Should be called by the `Listener` server)\n- `get_mode/0` -> Returns the mode of the CoreServer. (:standalone | :clustered)\n\n---\n\n# Listening for cluster node changes\nUsing `alert_me/1` from a local client, you can tell the CoreServer to call you back when there is a change to a cluster node.\nIgnores changes to itself, only delivers updates of other nodes.\n\nTo use this, the caller *must* implement the `CoreServer` behavior and callback `node_update/2`.\nOnce a change occurs, the CoreServer will call the callback function for the following module/process.\n`node_update/2` should contain the logic needed when a node changes state.","ref":"Beethoven.CoreServer.html"},{"type":"function","title":"Beethoven.CoreServer.add_node_to_mnesia/1","doc":"Adds a node to Mnesia cluster","ref":"Beethoven.CoreServer.html#add_node_to_mnesia/1"},{"type":"function","title":"Beethoven.CoreServer.alert_me/1","doc":"Tell the local CoreServer that we want to be alerted to changes to cluster node state.","ref":"Beethoven.CoreServer.html#alert_me/1"},{"type":"function","title":"Beethoven.CoreServer.child_spec/1","doc":"Returns a specification to start this module under a supervisor.\n\nSee `Supervisor`.","ref":"Beethoven.CoreServer.html#child_spec/1"},{"type":"function","title":"Beethoven.CoreServer.entry_point/1","doc":"Callback for entry when we are in :standalone or :clustered mode","ref":"Beethoven.CoreServer.html#entry_point/1"},{"type":"function","title":"Beethoven.CoreServer.get_mode/0","doc":"Gets mode from the CoreServer.","ref":"Beethoven.CoreServer.html#get_mode/0"},{"type":"function","title":"Beethoven.CoreServer.handle_cast/2","doc":"Callback to handle casts for services that need updates on node state.","ref":"Beethoven.CoreServer.html#handle_cast/2"},{"type":"function","title":"Beethoven.CoreServer.new_node/1","doc":"Add a node to the Cluster Node tracker.\nIf node is already tracked, it will be marked as `:online`.","ref":"Beethoven.CoreServer.html#new_node/1"},{"type":"function","title":"Beethoven.CoreServer.node_update/2","doc":"","ref":"Beethoven.CoreServer.html#node_update/2"},{"type":"callback","title":"Beethoven.CoreServer.node_update/2","doc":"Callback needed for downlevel services to streamline receiving node down updates.\n\n**Required if you follow core server for cluster updates via `alert_me/1`**","ref":"Beethoven.CoreServer.html#c:node_update/2"},{"type":"type","title":"Beethoven.CoreServer.nodeStatus/0","doc":"Possible status(s) for nodes within Beethoven.\n# Options\n- `:online`\n- `:offline`","ref":"Beethoven.CoreServer.html#t:nodeStatus/0"},{"type":"type","title":"Beethoven.CoreServer.serverStatus/0","doc":"Possible statuses for CoreServer","ref":"Beethoven.CoreServer.html#t:serverStatus/0"},{"type":"function","title":"Beethoven.CoreServer.start_link/1","doc":"Supervisor Entry point.","ref":"Beethoven.CoreServer.html#start_link/1"},{"type":"type","title":"Beethoven.CoreServer.trackerEvent/0","doc":"Single tracker event from the Mnesia table","ref":"Beethoven.CoreServer.html#t:trackerEvent/0"},{"type":"type","title":"Beethoven.CoreServer.trackerRow/0","doc":"A single row in the CoreServer tracker.","ref":"Beethoven.CoreServer.html#t:trackerRow/0"},{"type":"behaviour","title":"Beethoven.DistrServer","doc":"A modified version of the built-in `GenServer`.\nSpecialized for Beethoven's No-Master design; this GenServer will initialize a Mnesia table on creation.\nThese tables act as the primary state for the distributed process.\nSupports *most* GenServer logic and callbacks.","ref":"Beethoven.DistrServer.html"},{"type":"function","title":"Beethoven.DistrServer.call/3","doc":"Sends a cast to the provided `DistrServer`.\nSimilar to `GenServer.call/2` and `GenServer.call/3`","ref":"Beethoven.DistrServer.html#call/3"},{"type":"function","title":"Beethoven.DistrServer.cast/2","doc":"Sends a cast to the provided `DistrServer`. Similar to `GenServer.cast/2`","ref":"Beethoven.DistrServer.html#cast/2"},{"type":"callback","title":"Beethoven.DistrServer.config/0","doc":"**-Callback required-**\n\n`DistrServer` configuration. See `distrConfig()` type for more information on the return.","ref":"Beethoven.DistrServer.html#c:config/0"},{"type":"type","title":"Beethoven.DistrServer.copyTypes/0","doc":"Copy options for the Mnesia table.\n- `:local` -> Copies are only on the table-creating-node.\n- `:multi` -> Copies are pushed to ALL nodes in the cluster.","ref":"Beethoven.DistrServer.html#t:copyTypes/0"},{"type":"callback","title":"Beethoven.DistrServer.create_action/1","doc":"**-Callback required-**\n\nCallback that is triggered when the process creates the Mnesia Table for the cluster.","ref":"Beethoven.DistrServer.html#c:create_action/1"},{"type":"function","title":"Beethoven.DistrServer.distr_to_table_conf/1","doc":"Converts the `DistrConfig()` into the `tableConfig()` type.","ref":"Beethoven.DistrServer.html#distr_to_table_conf/1"},{"type":"type","title":"Beethoven.DistrServer.distrConfig/0","doc":"Configuration for the `DistrServer` instance.\n- `:tableName` -> Atomic name for the table.\n- `:columns` -> List of atoms representing the names of columns in the name.\n- `:indexes` -> List of table columns that should be indexed.\n**Note:** Indexing a column will slow writes to it,\nbut make read operations consistent regardless of the table's size.\n- `:dataType` -> Data type for the Mnesia table.\n- `:copyType` -> How the new table will be copied across the Beethoven cluster.","ref":"Beethoven.DistrServer.html#t:distrConfig/0"},{"type":"callback","title":"Beethoven.DistrServer.entry_point/1","doc":"**-Callback required-**\n\nEntry point for the `DistrServer` process. Similar to `init/1` for GenServers.","ref":"Beethoven.DistrServer.html#c:entry_point/1"},{"type":"function","title":"Beethoven.DistrServer.start_link/3","doc":"Starts a `DistrServer` process under the supervisor tree.\nSimilar to `GenServer.start_link/2` and `GenServer.start_link/3`","ref":"Beethoven.DistrServer.html#start_link/3"},{"type":"module","title":"Beethoven.HwMon","doc":"Supervisor for the HwMon stack of PIDs.\nThese PIDs log historical hardware consumption and signal changes to `Beethoven.Allocator.Ingress`.","ref":"Beethoven.HwMon.html"},{"type":"function","title":"Beethoven.HwMon.child_spec/1","doc":"Returns a specification to start this module under a supervisor.\n\nSee `Supervisor`.","ref":"Beethoven.HwMon.html#child_spec/1"},{"type":"function","title":"Beethoven.HwMon.start_link/1","doc":"Supervisor Entry point.","ref":"Beethoven.HwMon.html#start_link/1"},{"type":"module","title":"Beethoven.HwMon.Archive","doc":"Tracks historical CPU and RAM usage as sampled by `HwMon.Server`.","ref":"Beethoven.HwMon.Archive.html"},{"type":"function","title":"Beethoven.HwMon.Archive.cast_cpu/1","doc":"Casts CPU telemetry to Archive.","ref":"Beethoven.HwMon.Archive.html#cast_cpu/1"},{"type":"function","title":"Beethoven.HwMon.Archive.cast_diskIO/1","doc":"Casts DiskIO telemetry to Archive.","ref":"Beethoven.HwMon.Archive.html#cast_diskIO/1"},{"type":"function","title":"Beethoven.HwMon.Archive.cast_networkIO/1","doc":"Casts networkIO telemetry to Archive.","ref":"Beethoven.HwMon.Archive.html#cast_networkIO/1"},{"type":"function","title":"Beethoven.HwMon.Archive.cast_ram/1","doc":"Casts RAM telemetry to Archive.","ref":"Beethoven.HwMon.Archive.html#cast_ram/1"},{"type":"function","title":"Beethoven.HwMon.Archive.child_spec/1","doc":"Returns a specification to start this module under a supervisor.\n\nSee `Supervisor`.","ref":"Beethoven.HwMon.Archive.html#child_spec/1"},{"type":"function","title":"Beethoven.HwMon.Archive.get_stat/1","doc":"Gets telemetry for a given stat.","ref":"Beethoven.HwMon.Archive.html#get_stat/1"},{"type":"function","title":"Beethoven.HwMon.Archive.start_link/1","doc":"Supervisor Entry point.","ref":"Beethoven.HwMon.Archive.html#start_link/1"},{"type":"type","title":"Beethoven.HwMon.Archive.stat_category/0","doc":"Stat categories.","ref":"Beethoven.HwMon.Archive.html#t:stat_category/0"},{"type":"type","title":"Beethoven.HwMon.Archive.stat_object/0","doc":"Stat object that is stored on ETS","ref":"Beethoven.HwMon.Archive.html#t:stat_object/0"},{"type":"module","title":"Beethoven.HwMon.Server","doc":"DistrServer to monitor hardware resources and sends signals to `Beethoven.Allocator` plus the integrated Mnesia table.","ref":"Beethoven.HwMon.Server.html"},{"type":"function","title":"Beethoven.HwMon.Server.child_spec/1","doc":"Returns a specification to start this module under a supervisor.\n\nSee `Supervisor`.","ref":"Beethoven.HwMon.Server.html#child_spec/1"},{"type":"function","title":"Beethoven.HwMon.Server.handle_cast/2","doc":"#\n# PERCENTAGE FORMAT\n#\n# YES -> 4% => 4.0 | 61% => 61.0\n# NO  -> 4% => 0.04 | 61% => 0.61","ref":"Beethoven.HwMon.Server.html#handle_cast/2"},{"type":"function","title":"Beethoven.HwMon.Server.node_update/2","doc":"","ref":"Beethoven.HwMon.Server.html#node_update/2"},{"type":"function","title":"Beethoven.HwMon.Server.start_link/1","doc":"Supervisor Entry point.","ref":"Beethoven.HwMon.Server.html#start_link/1"},{"type":"module","title":"Beethoven.Ipv4","doc":"Module to handle scanning IPV4 addresses within a network.","ref":"Beethoven.Ipv4.html"},{"type":"function","title":"Beethoven.Ipv4.get_host_network_addresses/0","doc":"Retrieves the hosts IP address. Pulls Network and Netmask from the config.","ref":"Beethoven.Ipv4.html#get_host_network_addresses/0"},{"type":"function","title":"Beethoven.Ipv4.get_host_network_addresses/2","doc":"Same as get_host_network_addresses/0 but works off provided network and netmask.","ref":"Beethoven.Ipv4.html#get_host_network_addresses/2"},{"type":"function","title":"Beethoven.Ipv4.get_hosts/2","doc":"Generates a list of hosts with the network and netmask provided","ref":"Beethoven.Ipv4.html#get_hosts/2"},{"type":"function","title":"Beethoven.Ipv4.get_netmask_hosts/1","doc":"Gets the number of IPs within a netmask.","ref":"Beethoven.Ipv4.html#get_netmask_hosts/1"},{"type":"function","title":"Beethoven.Ipv4.increment_ip/1","doc":"Increments IP by one host.","ref":"Beethoven.Ipv4.html#increment_ip/1"},{"type":"module","title":"Beethoven.Locator","doc":"GenServer to handle searching for other Beethoven nodes or clusters.\nThis Locator server's goal is to find a BeaconServer on another node.\nOnce connected, they will communicate with each other via the `Beethoven.SeekChat` module.\n\n# Modes\n- `:seeking` -> Currently Searching for listening servers.\n- `:watching` ->  (TBD) Slower search to ensure there are no standalone clusters or nodes.\n\n---\n\n# `:seeking`\nService will start up and perform a seeking operation.\nThe locator will start the Core service(s) (via Substrate) once either is met:\n- (1). Seeking attempts have become exhausted. [CoreServer <- `:standalone`]\n- (2). A listener server is found. [CoreServer <- `:clustered`]\n\n---\n\n# `:watching`\nUsed when the cluster is in standalone mode.\nThis mode will continue the scan for other clusters.\nThis is needed to ensure there are no other clusters existing at the same time.","ref":"Beethoven.Locator.html"},{"type":"function","title":"Beethoven.Locator.child_spec/1","doc":"Returns a specification to start this module under a supervisor.\n\nSee `Supervisor`.","ref":"Beethoven.Locator.html#child_spec/1"},{"type":"function","title":"Beethoven.Locator.start_link/1","doc":"Entry point for a supervisor.","ref":"Beethoven.Locator.html#start_link/1"},{"type":"module","title":"Beethoven.MnesiaTools","doc":"Generic Library to simplify certain Mnesia tasks.","ref":"Beethoven.MnesiaTools.html"},{"type":"function","title":"Beethoven.MnesiaTools.copy_table/1","doc":"Copies a replica of a desired table to local node memory.\n\nThe table may already exist in memory for the following reasons:\n- The table was created for all nodes, and this node was already in the cluster.\n- The table was initialized on this node.\n- A node with the same name was successfully joined the cluster in the past, and power-cycled.","ref":"Beethoven.MnesiaTools.html#copy_table/1"},{"type":"function","title":"Beethoven.MnesiaTools.create_table_ifnot_exist/1","doc":"Creates table if it does not already exist.\nApplies indexes on creation.\nWill","ref":"Beethoven.MnesiaTools.html#create_table_ifnot_exist/1"},{"type":"function","title":"Beethoven.MnesiaTools.delete_copy/1","doc":"Removes the replica of a desired table from local memory.","ref":"Beethoven.MnesiaTools.html#delete_copy/1"},{"type":"function","title":"Beethoven.MnesiaTools.subscribe/1","doc":"Subscribe to changes to a Mnesia table.","ref":"Beethoven.MnesiaTools.html#subscribe/1"},{"type":"function","title":"Beethoven.MnesiaTools.sync_run/1","doc":"Runs a job within a synchronous transaction","ref":"Beethoven.MnesiaTools.html#sync_run/1"},{"type":"function","title":"Beethoven.MnesiaTools.table_exists?/1","doc":"Check if a Mnesia table exists in the cluster.","ref":"Beethoven.MnesiaTools.html#table_exists?/1"},{"type":"type","title":"Beethoven.MnesiaTools.tableConfig/0","doc":"TableConfig contains the payload needed to create the state table needed by the process.","ref":"Beethoven.MnesiaTools.html#t:tableConfig/0"},{"type":"module","title":"Beethoven.Ready","doc":"Simple PID to track when Beethoven has fully initialized.\nUsually just called from RoleServer when it has ran out of work.\n\nThis is important as creating Mnesia tables before joining Beethoven will cause cluster conflicts.\n\n# Public API\n- 'ready?/0' Queries the ETS table used by this module to see if Beethoven is ready. Returns boolean.\n- 'until_ready/1' Similar to `ready?/0` but will block until Beethoven is ready.\n- `set_ready/1` Sets the ready state of Beethoven on ETS. Normally called by `Beethoven.RoleServer`","ref":"Beethoven.Ready.html"},{"type":"function","title":"Beethoven.Ready.child_spec/1","doc":"Returns a specification to start this module under a supervisor.\n\nSee `Supervisor`.","ref":"Beethoven.Ready.html#child_spec/1"},{"type":"function","title":"Beethoven.Ready.ready?/0","doc":"Gets the current ready state for Beethoven.","ref":"Beethoven.Ready.html#ready?/0"},{"type":"function","title":"Beethoven.Ready.set_ready/1","doc":"Sets ready state for Beethoven. Setting this value to true will make `ready?()` return true; indicating the service has initialized.\nSetting `false` performs the opposite.","ref":"Beethoven.Ready.html#set_ready/1"},{"type":"function","title":"Beethoven.Ready.start_link/1","doc":"Supervisor Entry point.","ref":"Beethoven.Ready.html#start_link/1"},{"type":"function","title":"Beethoven.Ready.until_ready/1","doc":"Similar to `ready?()` but will block until the service is ready.\nDefaults to 5_000 milliseconds.","ref":"Beethoven.Ready.html#until_ready/1"},{"type":"module","title":"Beethoven.RoleServer","doc":"Server PID that manages role assignment across the cluster.\nLeveraging the Mnesia integration with `DistrServer`,\nthese processes will be ephemeral and keep all state within Mnesia.","ref":"Beethoven.RoleServer.html"},{"type":"function","title":"Beethoven.RoleServer.child_spec/1","doc":"Returns a specification to start this module under a supervisor.\n\nSee `Supervisor`.","ref":"Beethoven.RoleServer.html#child_spec/1"},{"type":"function","title":"Beethoven.RoleServer.copy_tracker/0","doc":"Manually copy the tracking DB to the node.","ref":"Beethoven.RoleServer.html#copy_tracker/0"},{"type":"type","title":"Beethoven.RoleServer.roleName/0","doc":"Alias for `atom()`.","ref":"Beethoven.RoleServer.html#t:roleName/0"},{"type":"type","title":"Beethoven.RoleServer.roleRecord/0","doc":"Simplified type for tracker records.\nJust excludes the table name from the record tuple.","ref":"Beethoven.RoleServer.html#t:roleRecord/0"},{"type":"type","title":"Beethoven.RoleServer.roleRecords/0","doc":"List of `roleRecord()` objects.","ref":"Beethoven.RoleServer.html#t:roleRecords/0"},{"type":"function","title":"Beethoven.RoleServer.start_assign/0","doc":"Starts assignment job on the RoleServer.","ref":"Beethoven.RoleServer.html#start_assign/0"},{"type":"function","title":"Beethoven.RoleServer.start_link/1","doc":"Supervisor Entry point.","ref":"Beethoven.RoleServer.html#start_link/1"},{"type":"module","title":"Beethoven.SeekChat","doc":"Module to simplify the interface between nodes during the locator Seeking flow.","ref":"Beethoven.SeekChat.html"},{"type":"function","title":"Beethoven.SeekChat.decode/1","doc":"Deserializes a binary into `msg()` type.","ref":"Beethoven.SeekChat.html#decode/1"},{"type":"function","title":"Beethoven.SeekChat.encode/1","doc":"Serializes a `msg()` object into a binary.","ref":"Beethoven.SeekChat.html#encode/1"},{"type":"type","title":"Beethoven.SeekChat.msg/0","doc":"Type for sending messages between Locator and Listening Servers.","ref":"Beethoven.SeekChat.html#t:msg/0"},{"type":"function","title":"Beethoven.SeekChat.new_msg/2","doc":"Creates a new msg, in the form of `msg()`.\n# `type()`\n- `:seeking` --> (CLIENT) Client looking to join.\n- `:watching` --> (CLIENT) Client checking if anything else is listening.\n- `:reply` --> (SERVER) Server response to either message\n---\n# `payload()`:\n- `:join` --> (CLIENT) Seeking to join a cluster.\n- `:check` --> (CLIENT) Client is watching, and wants to know if we are in a cluster.\n- `:self` --> (SERVER) When client calls its own listener.\n- `list(node())` --> (SERVER) When client is watching, and server is in a cluster.\n- `:standalone` --> (SERVER) When client is watching, and the server is in standalone mode.\n- `:joined` --> (SERVER) Client request to join was successful.\n- `:join_failed` --> (SERVER) Client request to join failed.\n- `:error` --> (SERVER) Generic error occurred.","ref":"Beethoven.SeekChat.html#new_msg/2"},{"type":"type","title":"Beethoven.SeekChat.payload/0","doc":"Message payload.\n# Options:\n- `:join` --> (CLIENT) Seeking to join a cluster.\n- `:check` --> (CLIENT) Client is watching, and wants to know if we are in a cluster.\n- `:self` --> (SERVER) When client calls its own listener.\n- `list(node())` --> (SERVER) When client is watching, and server is in a cluster.\n- `:standalone` --> (SERVER) When client is watching, and the server is in standalone mode.\n- `:joined` --> (SERVER) Client request to join was successful.\n- `:join_failed` --> (SERVER) Client request to join failed.\n- `:error` --> (SERVER) Generic error occurred.","ref":"Beethoven.SeekChat.html#t:payload/0"},{"type":"type","title":"Beethoven.SeekChat.type/0","doc":"Request type for a node seeking message.\n# Client Options\n- `:seeking` --> Client looking to join.\n- `:watching` --> Client checking if anything else is listening.\n# Server Options\n- `:reply` --> Server response to either message","ref":"Beethoven.SeekChat.html#t:type/0"},{"type":"module","title":"Beethoven.Signals","doc":"Beethoven Allocator signals for the Beethoven service itself.","ref":"Beethoven.Signals.html"},{"type":"function","title":"Beethoven.Signals.decrement_beethoven_role_count/0","doc":"","ref":"Beethoven.Signals.html#decrement_beethoven_role_count/0"},{"type":"function","title":"Beethoven.Signals.increment_beethoven_role_count/0","doc":"","ref":"Beethoven.Signals.html#increment_beethoven_role_count/0"},{"type":"module","title":"Beethoven.Substrate","doc":"Supervisor for core services.\nThese are the services that need to start once Locator has determined the cluster state.\n\n# Nested services:\n- `Beethoven.Allocator` Stack of services to track and aggregate signals to determine how busy a node is.\n- `Beethoven.HwMon` Hardware monitor stack. Tracks hardware resource consumption and both stores the data historically and sends signals to `Allocator`.\n- `Beethoven.CoreServer` Node monitoring service. Can send signals to callers when node state changes.\n- `Beethoven.BeaconServer` TCP server for Beethoven instances to find each other. This interacts with the `Locator` service on other nodes.\n- `Beethoven.RoleServer` Role management and allocation service that can host roles defined in config.ex.","ref":"Beethoven.Substrate.html"},{"type":"function","title":"Beethoven.Substrate.child_spec/1","doc":"Returns a specification to start this module under a supervisor.\n\nSee `Supervisor`.","ref":"Beethoven.Substrate.html#child_spec/1"},{"type":"function","title":"Beethoven.Substrate.start_link/1","doc":"Supervisor Entry point.","ref":"Beethoven.Substrate.html#start_link/1"},{"type":"module","title":"Beethoven.TestRole","doc":"Test role to test RoleServer operations.\n\nA role is just another PID of some kind. Module must have `start_link/1` that returns {:ok, pid()} or the role will fail to load.","ref":"Beethoven.TestRole.html"},{"type":"function","title":"Beethoven.TestRole.child_spec/1","doc":"Returns a specification to start this module under a supervisor.\n\nSee `Supervisor`.","ref":"Beethoven.TestRole.html#child_spec/1"},{"type":"function","title":"Beethoven.TestRole.start_link/1","doc":"Entry point for RolServer/Supervisor","ref":"Beethoven.TestRole.html#start_link/1"},{"type":"module","title":"Beethoven.TestdRole","doc":"Example role that leverages DistrServer instead of GenServer.","ref":"Beethoven.TestdRole.html"},{"type":"function","title":"Beethoven.TestdRole.child_spec/1","doc":"Returns a specification to start this module under a supervisor.\n\nSee `Supervisor`.","ref":"Beethoven.TestdRole.html#child_spec/1"},{"type":"function","title":"Beethoven.TestdRole.node_update/2","doc":"","ref":"Beethoven.TestdRole.html#node_update/2"},{"type":"function","title":"Beethoven.TestdRole.start_link/1","doc":"","ref":"Beethoven.TestdRole.html#start_link/1"},{"type":"module","title":"Beethoven.Utils","doc":"Module for generic utilities.","ref":"Beethoven.Utils.html"},{"type":"function","title":"Beethoven.Utils.get_app_env/2","doc":"Gets an environmental variable from beethoven's application config","ref":"Beethoven.Utils.html#get_app_env/2"},{"type":"function","title":"Beethoven.Utils.monitor_all_nodes/1","doc":"Toggles the monitoring status of **all** nodes in the cluster.","ref":"Beethoven.Utils.html#monitor_all_nodes/1"},{"type":"function","title":"Beethoven.Utils.monitor_node/2","doc":"Toggles the monitoring status of another node in the cluster.","ref":"Beethoven.Utils.html#monitor_node/2"},{"type":"function","title":"Beethoven.Utils.random_backoff/1","doc":"Performs a backoff based on a random number within a provided range.\nTime will be used as milliseconds. Returns time waited with `:ok` atom.","ref":"Beethoven.Utils.html#random_backoff/1"},{"type":"function","title":"Beethoven.Utils.remote_call/3","doc":"Fn to simplify calling named Processes on other nodes... and getting a call back.","ref":"Beethoven.Utils.html#remote_call/3"},{"type":"module","title":"Template.DistrServer","doc":"","ref":"Template.DistrServer.html"},{"type":"function","title":"Template.DistrServer.child_spec/1","doc":"Returns a specification to start this module under a supervisor.\n\nSee `Supervisor`.","ref":"Template.DistrServer.html#child_spec/1"},{"type":"function","title":"Template.DistrServer.node_update/2","doc":"","ref":"Template.DistrServer.html#node_update/2"},{"type":"function","title":"Template.DistrServer.start_link/1","doc":"Supervisor Entry point.","ref":"Template.DistrServer.html#start_link/1"},{"type":"module","title":"Template.GenServer","doc":"","ref":"Template.GenServer.html"},{"type":"function","title":"Template.GenServer.child_spec/1","doc":"Returns a specification to start this module under a supervisor.\n\nSee `Supervisor`.","ref":"Template.GenServer.html#child_spec/1"},{"type":"function","title":"Template.GenServer.start_link/1","doc":"Supervisor Entry point.","ref":"Template.GenServer.html#start_link/1"},{"type":"module","title":"Template.GenServerEts","doc":"","ref":"Template.GenServerEts.html"},{"type":"function","title":"Template.GenServerEts.child_spec/1","doc":"Returns a specification to start this module under a supervisor.\n\nSee `Supervisor`.","ref":"Template.GenServerEts.html#child_spec/1"},{"type":"function","title":"Template.GenServerEts.start_link/1","doc":"Supervisor Entry point.","ref":"Template.GenServerEts.html#start_link/1"}],"proglang":"elixir","content_type":"text/markdown","producer":{"name":"ex_doc","version":"0.37.3"}}